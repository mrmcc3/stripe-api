{:ops
 {:GetCustomersCustomerCards
  {:method "get",
   :path "/v1/customers/{customer}/cards",
   :path-params #{:customer},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the cards belonging to a customer.\nNote that the 10 most recent sources are always available on the Customer object.\nIf you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional cards.",
   :deprecated true},
  :GetAccountPersons
  {:method "get",
   :path "/v1/account/persons",
   :path-params #{},
   :query-params
   #{:ending_before :limit :relationship :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first."},
  :PostPaymentMethodsPaymentMethod
  {:method "post",
   :path "/v1/payment_methods/{payment_method}",
   :path-params #{:payment_method},
   :query-params #{},
   :body-params
   #{:card :sepa_debit :billing_details :expand :metadata},
   :description
   "Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated."},
  :DeleteSkusId
  {:method "delete",
   :path "/v1/skus/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a SKU. Deleting a SKU is only possible until it has been used in an order."},
  :GetTerminalReaders
  {:method "get",
   :path "/v1/terminal/readers",
   :path-params #{},
   :query-params
   #{:ending_before :device_type :limit :status :location :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of Reader objects."},
  :DeleteSubscriptionsSubscriptionExposedIdDiscount
  {:method "delete",
   :path "/v1/subscriptions/{subscription_exposed_id}/discount",
   :path-params #{:subscription_exposed_id},
   :query-params #{},
   :body-params #{},
   :description
   "Removes the currently applied discount on a subscription."},
  :GetBitcoinTransactions
  {:method "get",
   :path "/v1/bitcoin/transactions",
   :path-params #{},
   :query-params
   #{:ending_before :limit :customer :expand :receiver
     :starting_after},
   :body-params #{},
   :description "List bitcoin transacitons for a given receiver.",
   :deprecated true},
  :PostChargesChargeDisputeClose
  {:method "post",
   :path "/v1/charges/{charge}/dispute/close",
   :path-params #{:charge},
   :query-params #{},
   :body-params #{:expand},
   :description ""},
  :PostPayouts
  {:method "post",
   :path "/v1/payouts",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :amount :method :source_type :currency :expand
     :metadata :destination :statement_descriptor},
   :description
   "To send funds to your own bank account, you create a new payout object. Your Stripe balance must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.\n\nIf your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.\n\nIf you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The balance object details available and pending amounts by source type."},
  :PostTransfersIdReversals
  {:method "post",
   :path "/v1/transfers/{id}/reversals",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:description :amount :refund_application_fee :expand :metadata},
   :description
   "When you create a new reversal, you must specify a transfer to create it on.\n\nWhen reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.\n\nOnce entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer."},
  :PostReportingReportRuns
  {:method "post",
   :path "/v1/reporting/report_runs",
   :path-params #{},
   :query-params #{},
   :body-params #{:report_type :parameters :expand},
   :description
   "Creates a new object and begin running the report. (Requires a live-mode API key.)"},
  :GetAccount
  {:method "get",
   :path "/v1/account",
   :path-params #{},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the details of an account."},
  :PostTopups
  {:method "post",
   :path "/v1/topups",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :amount :source :transfer_group :currency :expand
     :metadata :statement_descriptor},
   :description "Top up the balance of an account"},
  :PostCouponsCoupon
  {:method "post",
   :path "/v1/coupons/{coupon}",
   :path-params #{:coupon},
   :query-params #{},
   :body-params #{:name :expand :metadata},
   :description
   "Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable."},
  :GetOrderReturnsId
  {:method "get",
   :path "/v1/order_returns/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information."},
  :PostCustomersCustomer
  {:method "post",
   :path "/v1/customers/{customer}",
   :path-params #{:customer},
   :query-params #{},
   :body-params
   #{:default_source :description :address :email :invoice_prefix
     :coupon :phone :default_bank_account :name :tax_exempt :source
     :invoice_settings :trial_end :bank_account :card :balance
     :preferred_locales :default_card :shipping :default_alipay_account
     :next_invoice_sequence :expand :metadata},
   :description
   "Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the source parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the source parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the past_due state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the default_source for a customer will not trigger this behavior.\n\nThis request accepts mostly the same arguments as the customer creation call."},
  :PostSetupIntents
  {:method "post",
   :path "/v1/setup_intents",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:confirm :description :return_url :single_use :payment_method
     :on_behalf_of :payment_method_types :customer :usage :mandate_data
     :expand :metadata :payment_method_options},
   :description
   "Creates a SetupIntent object.\n\nAfter the SetupIntent is created, attach a payment method and confirm\nto collect any required permissions to charge the payment method later."},
  :GetIssuingTransactions
  {:method "get",
   :path "/v1/issuing/transactions",
   :path-params #{},
   :query-params
   #{:ending_before :settlement :cardholder :limit :dispute :created
     :card :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Transaction objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :PostCustomersCustomerTaxIds
  {:method "post",
   :path "/v1/customers/{customer}/tax_ids",
   :path-params #{:customer},
   :query-params #{},
   :body-params #{:value :type :expand},
   :description "Creates a new TaxID object for a customer."},
  :GetAccountsAccount
  {:method "get",
   :path "/v1/accounts/{account}",
   :path-params #{:account},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the details of an account."},
  :PostTopupsTopupCancel
  {:method "post",
   :path "/v1/topups/{topup}/cancel",
   :path-params #{:topup},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Cancels a top-up. Only pending top-ups can be canceled."},
  :DeleteWebhookEndpointsWebhookEndpoint
  {:method "delete",
   :path "/v1/webhook_endpoints/{webhook_endpoint}",
   :path-params #{:webhook_endpoint},
   :query-params #{},
   :body-params #{},
   :description
   "You can also delete webhook endpoints via the webhook endpoint management page of the Stripe dashboard."},
  :GetCustomersCustomerSourcesId
  {:method "get",
   :path "/v1/customers/{customer}/sources/{id}",
   :path-params #{:customer :id},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieve a specified source for a given customer."},
  :DeleteApplePayDomainsDomain
  {:method "delete",
   :path "/v1/apple_pay/domains/{domain}",
   :path-params #{:domain},
   :query-params #{},
   :body-params #{},
   :description "Delete an apple pay domain."},
  :GetPaymentIntentsIntent
  {:method "get",
   :path "/v1/payment_intents/{intent}",
   :path-params #{:intent},
   :query-params #{:expand :client_secret},
   :body-params #{},
   :description
   "Retrieves the details of a PaymentIntent that has previously been created. \n\nClient-side retrieval using a publishable key is allowed when the client_secret is provided in the query string. \n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the payment intent object reference for more details."},
  :GetRefunds
  {:method "get",
   :path "/v1/refunds",
   :path-params #{},
   :query-params
   #{:ending_before :limit :payment_intent :created :charge :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object."},
  :PostIssuingCardholdersCardholder
  {:method "post",
   :path "/v1/issuing/cardholders/{cardholder}",
   :path-params #{:cardholder},
   :query-params #{},
   :body-params
   #{:email :phone_number :is_default :billing :authorization_controls
     :status :individual :expand :metadata :company},
   :description
   "Updates the specified Issuing Cardholder object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :PostPayoutsPayout
  {:method "post",
   :path "/v1/payouts/{payout}",
   :path-params #{:payout},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments."},
  :PostReviewsReviewApprove
  {:method "post",
   :path "/v1/reviews/{review}/approve",
   :path-params #{:review},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Approves a Review object, closing it and removing it from the list of reviews."},
  :PostCustomersCustomerBankAccounts
  {:method "post",
   :path "/v1/customers/{customer}/bank_accounts",
   :path-params #{:customer},
   :query-params #{},
   :body-params
   #{:source :alipay_account :bank_account :card :expand :metadata},
   :description
   "When you create a new credit card, you must specify a customer or recipient on which to create it.\n\nIf the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer to have a new default_source."},
  :GetTransfersTransferReversalsId
  {:method "get",
   :path "/v1/transfers/{transfer}/reversals/{id}",
   :path-params #{:transfer :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer."},
  :GetIssuerFraudRecordsIssuerFraudRecord
  {:method "get",
   :path "/v1/issuer_fraud_records/{issuer_fraud_record}",
   :path-params #{:issuer_fraud_record},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an issuer fraud record that has previously been created. \n\nPlease refer to the issuer fraud record object reference for more details.",
   :deprecated true},
  :PostProducts
  {:method "post",
   :path "/v1/products",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :caption :images :name :deactivate_on
     :package_dimensions :type :shippable :active :id :url :attributes
     :expand :metadata :statement_descriptor :unit_label},
   :description
   "Creates a new product object. To create a product for use with orders, see Products."},
  :GetExchangeRates
  {:method "get",
   :path "/v1/exchange_rates",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports."},
  :GetAccountsAccountPeople
  {:method "get",
   :path "/v1/accounts/{account}/people",
   :path-params #{:account},
   :query-params
   #{:ending_before :limit :relationship :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first."},
  :PostCustomersCustomerSources
  {:method "post",
   :path "/v1/customers/{customer}/sources",
   :path-params #{:customer},
   :query-params #{},
   :body-params
   #{:source :alipay_account :bank_account :card :expand :metadata},
   :description
   "When you create a new credit card, you must specify a customer or recipient on which to create it.\n\nIf the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer to have a new default_source."},
  :PostSubscriptionSchedulesSchedule
  {:method "post",
   :path "/v1/subscription_schedules/{schedule}",
   :path-params #{:schedule},
   :query-params #{},
   :body-params
   #{:prorate :proration_behavior :default_settings :phases
     :end_behavior :expand :metadata},
   :description "Updates an existing subscription schedule."},
  :PostSetupIntentsIntentConfirm
  {:method "post",
   :path "/v1/setup_intents/{intent}/confirm",
   :path-params #{:intent},
   :query-params #{},
   :body-params
   #{:return_url :payment_method :mandate_data :expand :client_secret
     :payment_method_options},
   :description
   "Confirm that your customer intends to set up the current or\nprovided payment method. For example, you would confirm a SetupIntent\nwhen a customer hits the “Save” button on a payment method management\npage on your website.\n\nIf the selected payment method does not require any additional\nsteps from the customer, the SetupIntent will transition to the\nsucceeded status.\n\nOtherwise, it will transition to the requires_action status and\nsuggest additional actions via next_action. If setup fails,\nthe SetupIntent will transition to the\nrequires_payment_method status."},
  :PostIssuingCardsCardPin
  {:method "post",
   :path "/v1/issuing/cards/{card}/pin",
   :path-params #{:card},
   :query-params #{},
   :body-params #{:verification :pin :expand},
   :description
   "Updates the PIN for a card, subject to cardholder verification. See Retrieve and update cardholder PIN"},
  :PostAccountBankAccounts
  {:method "post",
   :path "/v1/account/bank_accounts",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:external_account :bank_account :expand :metadata
     :default_for_currency},
   :description "Create an external account for a given account."},
  :DeleteAccountBankAccountsId
  {:method "delete",
   :path "/v1/account/bank_accounts/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a specified external account for a given account."},
  :PostEphemeralKeys
  {:method "post",
   :path "/v1/ephemeral_keys",
   :path-params #{},
   :query-params #{},
   :body-params #{:customer :issuing_card :expand},
   :description "Creates a short-lived API key for a given resource."},
  :PutAccountsAccountLogout
  {:method "put",
   :path "/v1/accounts/{account}/logout",
   :path-params #{:account},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Invalidates all sessions for a light account, for a platform to use during platform logout.\n\nYou may only log out Express accounts connected to your platform."},
  :GetBitcoinReceiversId
  {:method "get",
   :path "/v1/bitcoin/receivers/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the Bitcoin receiver with the given ID.",
   :deprecated true},
  :DeletePlansPlan
  {:method "delete",
   :path "/v1/plans/{plan}",
   :path-params #{:plan},
   :query-params #{},
   :body-params #{},
   :description
   "Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected."},
  :DeleteAccountsAccountBankAccountsId
  {:method "delete",
   :path "/v1/accounts/{account}/bank_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a specified external account for a given account."},
  :PostAccount
  {:method "post",
   :path "/v1/account",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:email :business_profile :business_type :settings
     :external_account :bank_account :requested_capabilities
     :tos_acceptance :default_currency :individual :expand :metadata
     :company :account_token},
   :description
   "Updates a connected Express or Custom account by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked Custom Only below.) Parameters marked Custom and Express are supported by both account types.\n\nTo update your own account, use the Dashboard. Refer to our Connect documentation to learn more about updating accounts."},
  :PostPaymentIntentsIntentConfirm
  {:method "post",
   :path "/v1/payment_intents/{intent}/confirm",
   :path-params #{:intent},
   :query-params #{},
   :body-params
   #{:return_url :payment_method :save_payment_method :use_stripe_sdk
     :setup_future_usage :receipt_email :mandate :payment_method_types
     :off_session :mandate_data :error_on_requires_action :shipping
     :expand :client_secret :payment_method_options},
   :description
   "Confirm that your customer intends to pay with current or provided\npayment method. Upon confirmation, the PaymentIntent will attempt to initiate\na payment.\n\nIf the selected payment method requires additional authentication steps, the\nPaymentIntent will transition to the requires_action status and\nsuggest additional actions via next_action. If payment fails,\nthe PaymentIntent will transition to the requires_payment_method status. If\npayment succeeds, the PaymentIntent will transition to the succeeded\nstatus (or requires_capture, if capture_method is set to manual).\n\nIf the confirmation_method is automatic, payment may be attempted\nusing our client SDKs\nand the PaymentIntent’s client_secret.\nAfter next_actions are handled by the client, no additional\nconfirmation is required to complete the payment.\n\nIf the confirmation_method is manual, all payment attempts must be\ninitiated using a secret key.\nIf any actions are required for the payment, the PaymentIntent will\nreturn to the requires_confirmation state\nafter those actions are completed. Your server needs to then\nexplicitly re-confirm the PaymentIntent to initiate the next payment\nattempt. Read the expanded documentation\nto learn more about manual confirmation."},
  :GetApplePayDomainsDomain
  {:method "get",
   :path "/v1/apple_pay/domains/{domain}",
   :path-params #{:domain},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieve an apple pay domain."},
  :GetCountrySpecsCountry
  {:method "get",
   :path "/v1/country_specs/{country}",
   :path-params #{:country},
   :query-params #{:expand},
   :body-params #{},
   :description "Returns a Country Spec for a given Country code."},
  :GetApplicationFeesFeeRefundsId
  {:method "get",
   :path "/v1/application_fees/{fee}/refunds/{id}",
   :path-params #{:fee :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee."},
  :GetSigmaScheduledQueryRuns
  {:method "get",
   :path "/v1/sigma/scheduled_query_runs",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "Returns a list of scheduled query runs."},
  :GetTransfersTransfer
  {:method "get",
   :path "/v1/transfers/{transfer}",
   :path-params #{:transfer},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information."},
  :DeleteAccountPersonsPerson
  {:method "delete",
   :path "/v1/account/persons/{person}",
   :path-params #{:person},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the account_opener. If your integration is using the executive parameter, you cannot delete the only verified executive on file."},
  :PostAccountExternalAccountsId
  {:method "post",
   :path "/v1/account/external_accounts/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :default_for_currency
     :address_city},
   :description
   "Updates the metadata, account holder name, and account holder type of a bank account belonging to a Custom account, and optionally sets it as the default for its currency. Other bank account details are not editable by design.\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes."},
  :PostApplicationFeesIdRefunds
  {:method "post",
   :path "/v1/application_fees/{id}/refunds",
   :path-params #{:id},
   :query-params #{},
   :body-params #{:amount :expand :metadata},
   :description
   "Refunds an application fee that has previously been collected but not yet refunded.\nFunds will be refunded to the Stripe account from which the fee was originally collected.\n\nYou can optionally refund only part of an application fee.\nYou can do so multiple times, until the entire fee has been refunded.\n\nOnce entirely refunded, an application fee can’t be refunded again.\nThis method will raise an error when called on an already-refunded application fee,\nor when trying to refund more money than is left on an application fee."},
  :PostInvoicesInvoiceFinalize
  {:method "post",
   :path "/v1/invoices/{invoice}/finalize",
   :path-params #{:invoice},
   :query-params #{},
   :body-params #{:auto_advance :expand},
   :description
   "Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method."},
  :PostInvoices
  {:method "post",
   :path "/v1/invoices",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:default_source :description :default_tax_rates :custom_fields
     :due_date :days_until_due :application_fee_amount
     :default_payment_method :footer :customer :auto_advance :expand
     :metadata :statement_descriptor :subscription :collection_method
     :tax_percent},
   :description
   "This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations."},
  :GetAccountsAccountExternalAccounts
  {:method "get",
   :path "/v1/accounts/{account}/external_accounts",
   :path-params #{:account},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "List external accounts for an account."},
  :GetDisputes
  {:method "get",
   :path "/v1/disputes",
   :path-params #{},
   :query-params
   #{:ending_before :limit :payment_intent :created :charge :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of your disputes."},
  :PostApplicationFeesIdRefund
  {:method "post",
   :path "/v1/application_fees/{id}/refund",
   :path-params #{:id},
   :query-params #{},
   :body-params #{:amount :directive :expand},
   :description ""},
  :PostSubscriptions
  {:method "post",
   :path "/v1/subscriptions",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:default_source :default_tax_rates :trial_from_plan
     :application_fee_percent :coupon :prorate :payment_behavior
     :days_until_due :proration_behavior :billing_cycle_anchor
     :default_payment_method :trial_end :customer :backdate_start_date
     :off_session :pending_invoice_item_interval :billing_thresholds
     :cancel_at_period_end :trial_period_days :items :expand :metadata
     :cancel_at :collection_method :tax_percent},
   :description
   "Creates a new subscription on an existing customer. Each customer can have up to 25 active or scheduled subscriptions."},
  :DeleteAccountsAccountPersonsPerson
  {:method "delete",
   :path "/v1/accounts/{account}/persons/{person}",
   :path-params #{:person :account},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the account_opener. If your integration is using the executive parameter, you cannot delete the only verified executive on file."},
  :PostSources
  {:method "post",
   :path "/v1/sources",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:amount :source_order :flow :mandate :type :customer
     :original_source :currency :token :usage :redirect :expand
     :metadata :receiver :statement_descriptor :owner},
   :description "Creates a new source object."},
  :GetReviews
  {:method "get",
   :path "/v1/reviews",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Review objects that have open set to true. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :PostAccountsAccountPersons
  {:method "post",
   :path "/v1/accounts/{account}/persons",
   :path-params #{:account},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification :dob
     :last_name_kanji :first_name_kana :last_name :first_name_kanji
     :gender :maiden_name :expand :metadata :id_number :ssn_last_4},
   :description "Creates a new person."},
  :DeleteAccountsAccountExternalAccountsId
  {:method "delete",
   :path "/v1/accounts/{account}/external_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a specified external account for a given account."},
  :GetPaymentIntents
  {:method "get",
   :path "/v1/payment_intents",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :customer :expand :starting_after},
   :body-params #{},
   :description "Returns a list of PaymentIntents."},
  :PostChargesChargeRefunds
  {:method "post",
   :path "/v1/charges/{charge}/refunds",
   :path-params #{:charge},
   :query-params #{},
   :body-params
   #{:amount :reverse_transfer :payment_intent :reason
     :refund_application_fee :expand :metadata},
   :description "Create a refund."},
  :PostAccountsAccountCapabilitiesCapability
  {:method "post",
   :path "/v1/accounts/{account}/capabilities/{capability}",
   :path-params #{:capability :account},
   :query-params #{},
   :body-params #{:requested :expand},
   :description "Updates an existing Account Capability."},
  :GetCountrySpecs
  {:method "get",
   :path "/v1/country_specs",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "Lists all Country Spec objects available in the API."},
  :GetAccountPeople
  {:method "get",
   :path "/v1/account/people",
   :path-params #{},
   :query-params
   #{:ending_before :limit :relationship :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first."},
  :PostCustomersCustomerCards
  {:method "post",
   :path "/v1/customers/{customer}/cards",
   :path-params #{:customer},
   :query-params #{},
   :body-params
   #{:source :alipay_account :bank_account :card :expand :metadata},
   :description
   "When you create a new credit card, you must specify a customer or recipient on which to create it.\n\nIf the card’s owner has no default card, then the new card will become the default.\nHowever, if the owner already has a default, then it will not change.\nTo change the default, you should update the customer to have a new default_source."},
  :GetCouponsCoupon
  {:method "get",
   :path "/v1/coupons/{coupon}",
   :path-params #{:coupon},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the coupon with the given ID."},
  :PostCreditNotesId
  {:method "post",
   :path "/v1/credit_notes/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{:expand :metadata :memo},
   :description "Updates an existing credit note."},
  :GetAccountExternalAccounts
  {:method "get",
   :path "/v1/account/external_accounts",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "List external accounts for an account."},
  :DeleteCustomersCustomerDiscount
  {:method "delete",
   :path "/v1/customers/{customer}/discount",
   :path-params #{:customer},
   :query-params #{},
   :body-params #{},
   :description
   "Removes the currently applied discount on a customer."},
  :GetReportingReportRuns
  {:method "get",
   :path "/v1/reporting/report_runs",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Report Runs, with the most recent appearing first. (Requires a live-mode API key.)"},
  :GetIssuingCards
  {:method "get",
   :path "/v1/issuing/cards",
   :path-params #{},
   :query-params
   #{:ending_before :cardholder :exp_year :limit :name :type :created
     :last4 :source :status :exp_month :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Card objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :GetSubscriptionItemsSubscriptionItemUsageRecordSummaries
  {:method "get",
   :path
   "/v1/subscription_items/{subscription_item}/usage_record_summaries",
   :path-params #{:subscription_item},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).\n\nThe list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends."},
  :GetBalanceTransactionsId
  {:method "get",
   :path "/v1/balance_transactions/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path /v1/balance/history/:id."},
  :PostRefundsRefund
  {:method "post",
   :path "/v1/refunds/{refund}",
   :path-params #{:refund},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument."},
  :GetCustomersCustomerBankAccounts
  {:method "get",
   :path "/v1/customers/{customer}/bank_accounts",
   :path-params #{:customer},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional bank accounts.",
   :deprecated true},
  :PostFileLinksLink
  {:method "post",
   :path "/v1/file_links/{link}",
   :path-params #{:link},
   :query-params #{},
   :body-params #{:expires_at :expand :metadata},
   :description
   "Updates an existing file link object. Expired links can no longer be updated."},
  :GetBalanceHistory
  {:method "get",
   :path "/v1/balance/history",
   :path-params #{},
   :query-params
   #{:ending_before :limit :type :created :source :currency :payout
     :available_on :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called “Balance history” and used the path /v1/balance/history."},
  :GetPayoutsPayout
  {:method "get",
   :path "/v1/payouts/{payout}",
   :path-params #{:payout},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information."},
  :GetPaymentMethodsPaymentMethod
  {:method "get",
   :path "/v1/payment_methods/{payment_method}",
   :path-params #{:payment_method},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a PaymentMethod object."},
  :PostDisputesDisputeClose
  {:method "post",
   :path "/v1/disputes/{dispute}/close",
   :path-params #{:dispute},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.\n\nThe status of the dispute will change from needs_response to lost. Closing a dispute is irreversible."},
  :GetSkusId
  {:method "get",
   :path "/v1/skus/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information."},
  :GetCustomersCustomerCardsId
  {:method "get",
   :path "/v1/customers/{customer}/cards/{id}",
   :path-params #{:customer :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.",
   :deprecated true},
  :PostTerminalLocations
  {:method "post",
   :path "/v1/terminal/locations",
   :path-params #{},
   :query-params #{},
   :body-params #{:address :display_name :expand :metadata},
   :description "Creates a new Location object."},
  :GetApplicationFeesIdRefunds
  {:method "get",
   :path "/v1/application_fees/{id}/refunds",
   :path-params #{:id},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional refunds."},
  :GetSubscriptionItemsItem
  {:method "get",
   :path "/v1/subscription_items/{item}",
   :path-params #{:item},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the invoice item with the given ID."},
  :GetRecipientsId
  {:method "get",
   :path "/v1/recipients/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.",
   :deprecated true},
  :PostRecipientsId
  {:method "post",
   :path "/v1/recipients/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:description :email :name :bank_account :card :tax_id
     :default_card :expand :metadata},
   :description
   "Updates the specified recipient by setting the values of the parameters passed.\nAny parameters not provided will be left unchanged.\n\nIf you update the name or tax ID, the identity verification will automatically be rerun.\nIf you update the bank account, the bank account validation will automatically be rerun.",
   :deprecated true},
  :PostAccountsAccountBankAccounts
  {:method "post",
   :path "/v1/accounts/{account}/bank_accounts",
   :path-params #{:account},
   :query-params #{},
   :body-params
   #{:external_account :bank_account :expand :metadata
     :default_for_currency},
   :description "Create an external account for a given account."},
  :GetRadarEarlyFraudWarningsEarlyFraudWarning
  {:method "get",
   :path "/v1/radar/early_fraud_warnings/{early_fraud_warning}",
   :path-params #{:early_fraud_warning},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an early fraud warning that has previously been created. \n\nPlease refer to the early fraud warning object reference for more details."},
  :GetApplicationFees
  {:method "get",
   :path "/v1/application_fees",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :charge :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first."},
  :DeleteAccountExternalAccountsId
  {:method "delete",
   :path "/v1/account/external_accounts/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a specified external account for a given account."},
  :PostAccountsAccountExternalAccountsId
  {:method "post",
   :path "/v1/accounts/{account}/external_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :default_for_currency
     :address_city},
   :description
   "Updates the metadata, account holder name, and account holder type of a bank account belonging to a Custom account, and optionally sets it as the default for its currency. Other bank account details are not editable by design.\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes."},
  :PostPaymentMethodsPaymentMethodDetach
  {:method "post",
   :path "/v1/payment_methods/{payment_method}/detach",
   :path-params #{:payment_method},
   :query-params #{},
   :body-params #{:expand},
   :description "Detaches a PaymentMethod object from a Customer."},
  :PostCustomersCustomerSourcesId
  {:method "post",
   :path "/v1/customers/{customer}/sources/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :owner :address_city},
   :description "Update a specified source for a given customer."},
  :GetSetupIntents
  {:method "get",
   :path "/v1/setup_intents",
   :path-params #{},
   :query-params
   #{:ending_before :payment_method :limit :created :customer :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of SetupIntents."},
  :GetAccountsAccountBankAccountsId
  {:method "get",
   :path "/v1/accounts/{account}/bank_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieve a specified external account for a given account."},
  :GetOrders
  {:method "get",
   :path "/v1/orders",
   :path-params #{},
   :query-params
   #{:ending_before :limit :status_transitions :ids :created :customer
     :status :upstream_ids :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first."},
  :PostInvoicesInvoicePay
  {:method "post",
   :path "/v1/invoices/{invoice}/pay",
   :path-params #{:invoice},
   :query-params #{},
   :body-params
   #{:payment_method :paid_out_of_band :source :off_session :forgive
     :expand},
   :description
   "Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your subscriptions settings. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so."},
  :PostAccountsAccountExternalAccounts
  {:method "post",
   :path "/v1/accounts/{account}/external_accounts",
   :path-params #{:account},
   :query-params #{},
   :body-params
   #{:external_account :bank_account :expand :metadata
     :default_for_currency},
   :description "Create an external account for a given account."},
  :DeleteRadarValueListsValueList
  {:method "delete",
   :path "/v1/radar/value_lists/{value_list}",
   :path-params #{:value_list},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes a ValueList object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules."},
  :GetCreditNotesPreviewLines
  {:method "get",
   :path "/v1/credit_notes/preview/lines",
   :path-params #{},
   :query-params
   #{:refund_amount :amount :ending_before :credit_amount :limit :lines
     :invoice :reason :out_of_band_amount :refund :expand :metadata
     :memo :starting_after},
   :body-params #{},
   :description
   "When retrieving a credit note preview, you’ll get a lines property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items."},
  :PostIssuingVerifications
  {:method "post",
   :path "/v1/issuing/verifications",
   :path-params #{},
   :query-params #{},
   :body-params #{:scope :card :verification_method :expand},
   :description
   "Some actions (eg: updating a PIN) need confirmation from the cardholder"},
  :PostAccountLinks
  {:method "post",
   :path "/v1/account_links",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:success_url :type :account :collect :failure_url :expand},
   :description
   "Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow."},
  :Get3dSecureThreeDSecure
  {:method "get",
   :path "/v1/3d_secure/{three_d_secure}",
   :path-params #{:three_d_secure},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a 3D Secure object."},
  :PostPaymentMethodsPaymentMethodAttach
  {:method "post",
   :path "/v1/payment_methods/{payment_method}/attach",
   :path-params #{:payment_method},
   :query-params #{},
   :body-params #{:customer :expand},
   :description
   "Attaches a PaymentMethod object to a Customer.\n\nTo use this PaymentMethod as the default for invoice or subscription payments,\nset invoice_settings.default_payment_method,\non the Customer to the PaymentMethod’s ID."},
  :PostInvoicesInvoice
  {:method "post",
   :path "/v1/invoices/{invoice}",
   :path-params #{:invoice},
   :query-params #{},
   :body-params
   #{:default_source :description :default_tax_rates :custom_fields
     :due_date :days_until_due :application_fee_amount
     :default_payment_method :footer :auto_advance :expand :metadata
     :statement_descriptor :collection_method :tax_percent},
   :description
   "Draft invoices are fully editable. Once an invoice is finalized,\nmonetary values, as well as collection_method, become uneditable.\n\nIf you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,\nsending reminders for, or automatically reconciling invoices, pass\nauto_advance=false."},
  :GetIssuingCardholdersCardholder
  {:method "get",
   :path "/v1/issuing/cardholders/{cardholder}",
   :path-params #{:cardholder},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Cardholder object."},
  :GetInvoicesUpcomingLines
  {:method "get",
   :path "/v1/invoices/upcoming/lines",
   :path-params #{},
   :query-params
   #{:ending_before :schedule :subscription_items :coupon :limit
     :subscription_trial_from_plan :subscription_start_date :customer
     :subscription_tax_percent :subscription_cancel_now
     :subscription_proration_date :subscription_billing_cycle_anchor
     :subscription_trial_end :subscription_proration_behavior
     :subscription_cancel_at :invoice_items
     :subscription_cancel_at_period_end :subscription_prorate :expand
     :starting_after :subscription :subscription_default_tax_rates},
   :body-params #{},
   :description
   "When retrieving an upcoming invoice, you’ll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items."},
  :PostOrders
  {:method "post",
   :path "/v1/orders",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:email :coupon :customer :currency :shipping :items :expand
     :metadata},
   :description "Creates a new order object."},
  :GetWebhookEndpointsWebhookEndpoint
  {:method "get",
   :path "/v1/webhook_endpoints/{webhook_endpoint}",
   :path-params #{:webhook_endpoint},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the webhook endpoint with the given ID."},
  :GetEvents
  {:method "get",
   :path "/v1/events",
   :path-params #{},
   :query-params
   #{:ending_before :limit :delivery_success :type :created :types
     :expand :starting_after},
   :body-params #{},
   :description
   "List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in event object api_version attribute (not according to your current Stripe API version or Stripe-Version header)."},
  :DeleteTerminalReadersReader
  {:method "delete",
   :path "/v1/terminal/readers/{reader}",
   :path-params #{:reader},
   :query-params #{},
   :body-params #{},
   :description "Deletes a Reader object."},
  :PostIssuingCards
  {:method "post",
   :path "/v1/issuing/cards",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:replacement_reason :replacement_for :cardholder
     :authorization_controls :type :currency :status :shipping :expand
     :metadata},
   :description "Creates an Issuing Card object."},
  :PostCustomersCustomerBankAccountsIdVerify
  {:method "post",
   :path "/v1/customers/{customer}/bank_accounts/{id}/verify",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{:amounts :expand},
   :description
   "Verify a specified bank account for a given customer."},
  :GetCustomersCustomerBalanceTransactionsTransaction
  {:method "get",
   :path "/v1/customers/{customer}/balance_transactions/{transaction}",
   :path-params #{:transaction :customer},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves a specific transaction that updated the customer’s balance."},
  :GetInvoicesInvoice
  {:method "get",
   :path "/v1/invoices/{invoice}",
   :path-params #{:invoice},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the invoice with the given ID."},
  :DeleteAccountsAccountPeoplePerson
  {:method "delete",
   :path "/v1/accounts/{account}/people/{person}",
   :path-params #{:person :account},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the account_opener. If your integration is using the executive parameter, you cannot delete the only verified executive on file."},
  :GetChargesChargeRefunds
  {:method "get",
   :path "/v1/charges/{charge}/refunds",
   :path-params #{:charge},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional refunds."},
  :PostChargesChargeCapture
  {:method "post",
   :path "/v1/charges/{charge}/capture",
   :path-params #{:charge},
   :query-params #{},
   :body-params
   #{:amount :application_fee :application_fee_amount
     :statement_descriptor_suffix :receipt_email :transfer_group
     :transfer_data :expand :statement_descriptor},
   :description
   "Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you created a charge with the capture option set to false.\n\nUncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable."},
  :PostAccountPersons
  {:method "post",
   :path "/v1/account/persons",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification
     :account :dob :last_name_kanji :first_name_kana :last_name
     :first_name_kanji :gender :maiden_name :expand :metadata
     :id_number :ssn_last_4},
   :description "Creates a new person."},
  :GetBalance
  {:method "get",
   :path "/v1/balance",
   :path-params #{},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the current account balance, based on the authentication that was used to make the request.\n For a sample request, see Accounting for negative balances."},
  :DeleteCustomersCustomerTaxIdsId
  {:method "delete",
   :path "/v1/customers/{customer}/tax_ids/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{},
   :description "Deletes an existing TaxID object."},
  :GetFiles
  {:method "get",
   :path "/v1/files",
   :path-params #{},
   :query-params
   #{:ending_before :limit :purpose :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first."},
  :GetCustomersCustomerBankAccountsId
  {:method "get",
   :path "/v1/customers/{customer}/bank_accounts/{id}",
   :path-params #{:customer :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.",
   :deprecated true},
  :PostAccountsAccountPeople
  {:method "post",
   :path "/v1/accounts/{account}/people",
   :path-params #{:account},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification :dob
     :last_name_kanji :first_name_kana :last_name :first_name_kanji
     :gender :maiden_name :expand :metadata :id_number :ssn_last_4},
   :description "Creates a new person."},
  :PostCustomersCustomerBankAccountsId
  {:method "post",
   :path "/v1/customers/{customer}/bank_accounts/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :owner :address_city},
   :description "Update a specified source for a given customer."},
  :GetBitcoinReceiversReceiverTransactions
  {:method "get",
   :path "/v1/bitcoin/receivers/{receiver}/transactions",
   :path-params #{:receiver},
   :query-params
   #{:ending_before :limit :customer :expand :starting_after},
   :body-params #{},
   :description "List bitcoin transacitons for a given receiver.",
   :deprecated true},
  :GetReportingReportTypes
  {:method "get",
   :path "/v1/reporting/report_types",
   :path-params #{},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Returns a full list of Report Types. (Requires a live-mode API key.)"},
  :GetCoupons
  {:method "get",
   :path "/v1/coupons",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :expand :starting_after},
   :body-params #{},
   :description "Returns a list of your coupons."},
  :PostIssuingDisputes
  {:method "post",
   :path "/v1/issuing/disputes",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:amount :evidence :reason :disputed_transaction :expand
     :metadata},
   :description "Creates an Issuing Dispute object."},
  :GetCustomersCustomerDiscount
  {:method "get",
   :path "/v1/customers/{customer}/discount",
   :path-params #{:customer},
   :query-params #{:expand},
   :body-params #{},
   :description ""},
  :GetAccountsAccountCapabilities
  {:method "get",
   :path "/v1/accounts/{account}/capabilities",
   :path-params #{:account},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first."},
  :GetIssuingDisputesDispute
  {:method "get",
   :path "/v1/issuing/disputes/{dispute}",
   :path-params #{:dispute},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Dispute object."},
  :PostPaymentMethods
  {:method "post",
   :path "/v1/payment_methods",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:payment_method :type :customer :card :sepa_debit :fpx
     :billing_details :expand :metadata :ideal},
   :description
   "Creates a PaymentMethod object. Read the Stripe.js reference to learn how to create PaymentMethods via Stripe.js."},
  :PostInvoiceitems
  {:method "post",
   :path "/v1/invoiceitems",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :amount :unit_amount :customer :unit_amount_decimal
     :invoice :currency :discountable :tax_rates :period :quantity
     :expand :metadata :subscription},
   :description
   "Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified."},
  :GetIssuingCardsCardPin
  {:method "get",
   :path "/v1/issuing/cards/{card}/pin",
   :path-params #{:card},
   :query-params #{:verification :expand},
   :body-params #{},
   :description
   "Retrieves the PIN for a card object, subject to cardholder verification, see Retrieve and update cardholder PIN"},
  :GetAccountBankAccountsId
  {:method "get",
   :path "/v1/account/bank_accounts/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieve a specified external account for a given account."},
  :PostIssuingDisputesDispute
  {:method "post",
   :path "/v1/issuing/disputes/{dispute}",
   :path-params #{:dispute},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified Issuing Dispute object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :PostCharges
  {:method "post",
   :path "/v1/charges",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :amount :application_fee :application_fee_amount
     :statement_descriptor_suffix :receipt_email :on_behalf_of :source
     :customer :card :transfer_group :currency :transfer_data :shipping
     :capture :expand :metadata :destination :statement_descriptor},
   :description
   "To charge a credit card or other payment source, you create a Charge object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully)."},
  :PostCustomersCustomerSubscriptions
  {:method "post",
   :path "/v1/customers/{customer}/subscriptions",
   :path-params #{:customer},
   :query-params #{},
   :body-params
   #{:default_source :default_tax_rates :trial_from_plan
     :application_fee_percent :coupon :prorate :payment_behavior
     :days_until_due :proration_behavior :billing_cycle_anchor
     :default_payment_method :trial_end :backdate_start_date
     :off_session :pending_invoice_item_interval :billing_thresholds
     :cancel_at_period_end :trial_period_days :items :expand :metadata
     :cancel_at :collection_method :tax_percent},
   :description "Creates a new subscription on an existing customer."},
  :PostIssuingAuthorizationsAuthorization
  {:method "post",
   :path "/v1/issuing/authorizations/{authorization}",
   :path-params #{:authorization},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified Issuing Authorization object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :PostCustomersCustomerBalanceTransactionsTransaction
  {:method "post",
   :path "/v1/customers/{customer}/balance_transactions/{transaction}",
   :path-params #{:transaction :customer},
   :query-params #{},
   :body-params #{:description :expand :metadata},
   :description
   "Most customer balance transaction fields are immutable, but you may update its description and metadata."},
  :GetSourcesSourceSourceTransactions
  {:method "get",
   :path "/v1/sources/{source}/source_transactions",
   :path-params #{:source},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "List source transactions for a given source."},
  :PostRefunds
  {:method "post",
   :path "/v1/refunds",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:amount :reverse_transfer :payment_intent :charge :reason
     :refund_application_fee :expand :metadata},
   :description "Create a refund."},
  :GetTransfers
  {:method "get",
   :path "/v1/transfers",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :transfer_group :expand
     :destination :starting_after},
   :body-params #{},
   :description
   "Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first."},
  :GetPlansPlan
  {:method "get",
   :path "/v1/plans/{plan}",
   :path-params #{:plan},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the plan with the given ID."},
  :PostIssuingCardsCard
  {:method "post",
   :path "/v1/issuing/cards/{card}",
   :path-params #{:card},
   :query-params #{},
   :body-params #{:authorization_controls :status :expand :metadata},
   :description
   "Updates the specified Issuing Card object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :GetProducts
  {:method "get",
   :path "/v1/products",
   :path-params #{},
   :query-params
   #{:ending_before :limit :ids :type :created :shippable :active :url
     :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first."},
  :GetBalanceHistoryId
  {:method "get",
   :path "/v1/balance/history/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the balance transaction with the given ID.\n\nNote that this endpoint previously used the path /v1/balance/history/:id."},
  :PostTerminalReadersReader
  {:method "post",
   :path "/v1/terminal/readers/{reader}",
   :path-params #{:reader},
   :query-params #{},
   :body-params #{:label :expand :metadata},
   :description
   "Updates a Reader object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :GetAccountCapabilities
  {:method "get",
   :path "/v1/account/capabilities",
   :path-params #{},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first."},
  :GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
  {:method "get",
   :path
   "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount",
   :path-params #{:customer :subscription_exposed_id},
   :query-params #{:expand},
   :body-params #{},
   :description ""},
  :PostTransfersTransfer
  {:method "post",
   :path "/v1/transfers/{transfer}",
   :path-params #{:transfer},
   :query-params #{},
   :body-params #{:description :expand :metadata},
   :description
   "Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts only metadata as an argument."},
  :PostTerminalLocationsLocation
  {:method "post",
   :path "/v1/terminal/locations/{location}",
   :path-params #{:location},
   :query-params #{},
   :body-params #{:address :display_name :expand :metadata},
   :description
   "Updates a Location object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :GetAccountsAccountPersonsPerson
  {:method "get",
   :path "/v1/accounts/{account}/persons/{person}",
   :path-params #{:person :account},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an existing person."},
  :GetCharges
  {:method "get",
   :path "/v1/charges",
   :path-params #{},
   :query-params
   #{:ending_before :limit :payment_intent :created :customer
     :transfer_group :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first."},
  :GetFilesFile
  {:method "get",
   :path "/v1/files/{file}",
   :path-params #{:file},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the File Upload Guide."},
  :GetApplePayDomains
  {:method "get",
   :path "/v1/apple_pay/domains",
   :path-params #{},
   :query-params
   #{:ending_before :limit :domain_name :expand :starting_after},
   :body-params #{},
   :description "List apple pay domains."},
  :GetPayouts
  {:method "get",
   :path "/v1/payouts",
   :path-params #{},
   :query-params
   #{:ending_before :limit :arrival_date :created :status :expand
     :destination :starting_after},
   :body-params #{},
   :description
   "Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first."},
  :GetIssuingDisputes
  {:method "get",
   :path "/v1/issuing/disputes",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :disputed_transaction :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Dispute objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :PostAccountsAccountPeoplePerson
  {:method "post",
   :path "/v1/accounts/{account}/people/{person}",
   :path-params #{:person :account},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification :dob
     :last_name_kanji :first_name_kana :last_name :first_name_kanji
     :gender :maiden_name :expand :metadata :id_number :ssn_last_4},
   :description "Updates an existing person."},
  :PostPaymentIntentsIntent
  {:method "post",
   :path "/v1/payment_intents/{intent}",
   :path-params #{:intent},
   :query-params #{},
   :body-params
   #{:description :amount :payment_method :save_payment_method
     :application_fee_amount :setup_future_usage
     :statement_descriptor_suffix :receipt_email :payment_method_types
     :customer :transfer_group :currency :transfer_data :shipping
     :expand :metadata :statement_descriptor :payment_method_options},
   :description
   "Updates properties on a PaymentIntent object without confirming.\n\nDepending on which properties you update, you may need to confirm the\nPaymentIntent again. For example, updating the payment_method will\nalways require you to confirm the PaymentIntent again. If you prefer to\nupdate and confirm at the same time, we recommend updating properties via\nthe confirm API instead."},
  :GetReviewsReview
  {:method "get",
   :path "/v1/reviews/{review}",
   :path-params #{:review},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a Review object."},
  :PostOrdersId
  {:method "post",
   :path "/v1/orders/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:coupon :selected_shipping_method :status :shipping :expand
     :metadata},
   :description
   "Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :GetAccountsAccountCapabilitiesCapability
  {:method "get",
   :path "/v1/accounts/{account}/capabilities/{capability}",
   :path-params #{:capability :account},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves information about the specified Account Capability."},
  :GetFileLinksLink
  {:method "get",
   :path "/v1/file_links/{link}",
   :path-params #{:link},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the file link with the given ID."},
  :GetAccountPeoplePerson
  {:method "get",
   :path "/v1/account/people/{person}",
   :path-params #{:person},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an existing person."},
  :GetSigmaScheduledQueryRunsScheduledQueryRun
  {:method "get",
   :path "/v1/sigma/scheduled_query_runs/{scheduled_query_run}",
   :path-params #{:scheduled_query_run},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the details of an scheduled query run."},
  :PostSubscriptionSchedulesScheduleRelease
  {:method "post",
   :path "/v1/subscription_schedules/{schedule}/release",
   :path-params #{:schedule},
   :query-params #{},
   :body-params #{:preserve_cancel_date :expand},
   :description
   "Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription’s ID to the released_subscription property."},
  :DeleteCouponsCoupon
  {:method "delete",
   :path "/v1/coupons/{coupon}",
   :path-params #{:coupon},
   :query-params #{},
   :body-params #{},
   :description
   "You can delete coupons via the coupon management page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API."},
  :GetIssuingSettlementsSettlement
  {:method "get",
   :path "/v1/issuing/settlements/{settlement}",
   :path-params #{:settlement},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Settlement object."},
  :GetIssuingCardholders
  {:method "get",
   :path "/v1/issuing/cardholders",
   :path-params #{},
   :query-params
   #{:ending_before :email :phone_number :limit :is_default :type
     :created :status :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Cardholder objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :GetBitcoinReceivers
  {:method "get",
   :path "/v1/bitcoin/receivers",
   :path-params #{},
   :query-params
   #{:ending_before :limit :active :uncaptured_funds :filled :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.",
   :deprecated true},
  :GetCreditNotesCreditNoteLines
  {:method "get",
   :path "/v1/credit_notes/{credit_note}/lines",
   :path-params #{:credit_note},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "When retrieving a credit note, you’ll get a lines property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items."},
  :PostInvoicesInvoiceSend
  {:method "post",
   :path "/v1/invoices/{invoice}/send",
   :path-params #{:invoice},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Stripe will automatically send invoices to customers according to your subscriptions settings. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.\n\nRequests made in test-mode result in no emails being sent, despite sending an invoice.sent event."},
  :PostFileLinks
  {:method "post",
   :path "/v1/file_links",
   :path-params #{},
   :query-params #{},
   :body-params #{:expires_at :file :expand :metadata},
   :description "Creates a new file link object."},
  :PostAccountPeople
  {:method "post",
   :path "/v1/account/people",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification
     :account :dob :last_name_kanji :first_name_kana :last_name
     :first_name_kanji :gender :maiden_name :expand :metadata
     :id_number :ssn_last_4},
   :description "Creates a new person."},
  :GetCreditNotesId
  {:method "get",
   :path "/v1/credit_notes/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the credit note object with the given identifier."},
  :PostCoupons
  {:method "post",
   :path "/v1/coupons",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:max_redemptions :name :amount_off :duration_in_months :duration
     :redeem_by :currency :percent_off :id :expand :metadata},
   :description
   "You can create coupons easily via the coupon management page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.\n\nA coupon has either a percent_off or an amount_off and currency. If you set an amount_off, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of 100 will have a final total of 0 if a coupon with an amount_off of 200 is applied to it and an invoice with a subtotal of 300 will have a final total of 100 if a coupon with an amount_off of 200 is applied to it."},
  :PostPaymentIntentsIntentCancel
  {:method "post",
   :path "/v1/payment_intents/{intent}/cancel",
   :path-params #{:intent},
   :query-params #{},
   :body-params #{:cancellation_reason :expand},
   :description
   "A PaymentIntent object can be canceled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action. \n\nOnce canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with status='requires_capture', the remaining amount_capturable will automatically be refunded."},
  :GetIssuingTransactionsTransaction
  {:method "get",
   :path "/v1/issuing/transactions/{transaction}",
   :path-params #{:transaction},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Transaction object."},
  :GetSubscriptionSchedules
  {:method "get",
   :path "/v1/subscription_schedules",
   :path-params #{},
   :query-params
   #{:released_at :ending_before :canceled_at :limit :completed_at
     :created :customer :scheduled :expand :starting_after},
   :body-params #{},
   :description "Retrieves the list of your subscription schedules."},
  :DeleteCustomersCustomerSourcesId
  {:method "delete",
   :path "/v1/customers/{customer}/sources/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{:expand},
   :description "Delete a specified source for a given customer."},
  :PostSetupIntentsIntent
  {:method "post",
   :path "/v1/setup_intents/{intent}",
   :path-params #{:intent},
   :query-params #{},
   :body-params
   #{:description :payment_method :payment_method_types :customer
     :expand :metadata :payment_method_options},
   :description "Updates a SetupIntent object."},
  :GetCustomers
  {:method "get",
   :path "/v1/customers",
   :path-params #{},
   :query-params
   #{:ending_before :email :limit :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first."},
  :GetCustomersCustomerSources
  {:method "get",
   :path "/v1/customers/{customer}/sources",
   :path-params #{:customer},
   :query-params
   #{:ending_before :limit :expand :object :starting_after},
   :body-params #{},
   :description "List sources for a specified customer."},
  :PostFiles
  {:method "post",
   :path "/v1/files",
   :path-params #{},
   :query-params #{},
   :body-params #{},
   :description
   "To upload a file to Stripe, you’ll need to send a request of type multipart/form-data. The request should contain the file you would like to upload, as well as the parameters for creating a file.\n\nAll of Stripe’s officially supported Client libraries should have support for sending multipart/form-data."},
  :GetAccounts
  {:method "get",
   :path "/v1/accounts",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of accounts connected to your platform via Connect. If you’re not a platform, the list is empty."},
  :PostSubscriptionSchedulesScheduleCancel
  {:method "post",
   :path "/v1/subscription_schedules/{schedule}/cancel",
   :path-params #{:schedule},
   :query-params #{},
   :body-params #{:prorate :invoice_now :expand},
   :description
   "Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active."},
  :PostDisputesDispute
  {:method "post",
   :path "/v1/disputes/{dispute}",
   :path-params #{:dispute},
   :query-params #{},
   :body-params #{:evidence :submit :expand :metadata},
   :description
   "When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your dashboard, but if you prefer, you can use the API to submit evidence programmatically.\n\nDepending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our guide to dispute types."},
  :GetTerminalLocationsLocation
  {:method "get",
   :path "/v1/terminal/locations/{location}",
   :path-params #{:location},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a Location object."},
  :PostIssuingCardholders
  {:method "post",
   :path "/v1/issuing/cardholders",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:email :phone_number :name :is_default :billing
     :authorization_controls :type :status :individual :expand
     :metadata :company},
   :description
   "Creates a new Issuing Cardholder object that can be issued cards."},
  :PostChargesCharge
  {:method "post",
   :path "/v1/charges/{charge}",
   :path-params #{:charge},
   :query-params #{},
   :body-params
   #{:description :receipt_email :customer :transfer_group :shipping
     :fraud_details :expand :metadata},
   :description
   "Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :PostCheckoutSessions
  {:method "post",
   :path "/v1/checkout/sessions",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:billing_address_collection :submit_type :success_url :locale
     :setup_intent_data :mode :customer_email :payment_method_types
     :customer :subscription_data :line_items :cancel_url
     :client_reference_id :shipping_address_collection
     :payment_intent_data :expand :metadata},
   :description "Creates a Session object."},
  :PostTerminalReaders
  {:method "post",
   :path "/v1/terminal/readers",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:label :registration_code :location :expand :metadata},
   :description "Creates a new Reader object."},
  :GetRefundsRefund
  {:method "get",
   :path "/v1/refunds/{refund}",
   :path-params #{:refund},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the details of an existing refund."},
  :DeleteCustomersCustomerSubscriptionsSubscriptionExposedId
  {:method "delete",
   :path
   "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
   :path-params #{:customer :subscription_exposed_id},
   :query-params #{},
   :body-params #{:prorate :invoice_now :expand},
   :description
   "Cancels a customer’s subscription. If you set the at_period_end parameter to true, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default false value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually deleted. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all."},
  :DeleteProductsId
  {:method "delete",
   :path "/v1/products/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{},
   :description
   "Delete a product. Deleting a product with type=good is only possible if it has no SKUs associated with it. Deleting a product with type=service is only possible if it has no plans associated with it."},
  :PostSourcesSourceVerify
  {:method "post",
   :path "/v1/sources/{source}/verify",
   :path-params #{:source},
   :query-params #{},
   :body-params #{:values :expand},
   :description "Verify a given source."},
  :GetDisputesDispute
  {:method "get",
   :path "/v1/disputes/{dispute}",
   :path-params #{:dispute},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the dispute with the given ID."},
  :PostChargesChargeRefund
  {:method "post",
   :path "/v1/charges/{charge}/refund",
   :path-params #{:charge},
   :query-params #{},
   :body-params
   #{:amount :reverse_transfer :payment_intent :reason
     :refund_application_fee :expand :metadata},
   :description
   "When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.\n\nCreating a new refund will refund a charge that has previously been created but not yet refunded.\nFunds will be refunded to the credit or debit card that was originally charged.\n\nYou can optionally refund only part of a charge.\nYou can do so multiple times, until the entire charge has been refunded.\n\nOnce entirely refunded, a charge can’t be refunded again.\nThis method will raise an error when called on an already-refunded charge,\nor when trying to refund more money than is left on a charge."},
  :PostPlans
  {:method "post",
   :path "/v1/plans",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:amount :tiers_mode :billing_scheme :usage_type :nickname
     :transform_usage :aggregate_usage :currency :product
     :interval_count :active :id :amount_decimal :trial_period_days
     :interval :tiers :expand :metadata},
   :description
   "You can create plans using the API, or in the Stripe Dashboard."},
  :PostRecipients
  {:method "post",
   :path "/v1/recipients",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :email :name :type :bank_account :card :tax_id
     :expand :metadata},
   :description
   "Creates a new Recipient object and verifies the recipient’s identity.\nAlso verifies the recipient’s bank account information or debit card, if either is provided.",
   :deprecated true},
  :GetBalanceTransactions
  {:method "get",
   :path "/v1/balance_transactions",
   :path-params #{},
   :query-params
   #{:ending_before :limit :type :created :source :currency :payout
     :available_on :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.\n\nNote that this endpoint was previously called “Balance history” and used the path /v1/balance/history."},
  :GetIssuingAuthorizations
  {:method "get",
   :path "/v1/issuing/authorizations",
   :path-params #{},
   :query-params
   #{:ending_before :cardholder :limit :created :card :status :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Authorization objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :GetProductsId
  {:method "get",
   :path "/v1/products/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information."},
  :GetRadarEarlyFraudWarnings
  {:method "get",
   :path "/v1/radar/early_fraud_warnings",
   :path-params #{},
   :query-params
   #{:ending_before :limit :charge :expand :starting_after},
   :body-params #{},
   :description "Returns a list of early fraud warnings."},
  :PostInvoicesInvoiceVoid
  {:method "post",
   :path "/v1/invoices/{invoice}/void",
   :path-params #{:invoice},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to deletion, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found."},
  :DeleteSubscriptionsSubscriptionExposedId
  {:method "delete",
   :path "/v1/subscriptions/{subscription_exposed_id}",
   :path-params #{:subscription_exposed_id},
   :query-params #{},
   :body-params #{:prorate :invoice_now :expand},
   :description
   "Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.\n\nNote, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually deleted. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\n\nBy default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all."},
  :PostIssuingAuthorizationsAuthorizationDecline
  {:method "post",
   :path "/v1/issuing/authorizations/{authorization}/decline",
   :path-params #{:authorization},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description "Declines a pending Issuing Authorization object."},
  :PostSubscriptionItemsItem
  {:method "post",
   :path "/v1/subscription_items/{item}",
   :path-params #{:item},
   :query-params #{},
   :body-params
   #{:prorate :payment_behavior :proration_behavior :proration_date
     :off_session :billing_thresholds :tax_rates :quantity :plan
     :expand :metadata},
   :description
   "Updates the plan or quantity of an item on a current subscription."},
  :PostIssuingTransactionsTransaction
  {:method "post",
   :path "/v1/issuing/transactions/{transaction}",
   :path-params #{:transaction},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified Issuing Transaction object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :PostSkusId
  {:method "post",
   :path "/v1/skus/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:package_dimensions :inventory :currency :product :active :image
     :attributes :price :expand :metadata},
   :description
   "Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nNote that a SKU’s attributes are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values."},
  :PostAccountsAccountBankAccountsId
  {:method "post",
   :path "/v1/accounts/{account}/bank_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :default_for_currency
     :address_city},
   :description
   "Updates the metadata, account holder name, and account holder type of a bank account belonging to a Custom account, and optionally sets it as the default for its currency. Other bank account details are not editable by design.\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes."},
  :GetChargesChargeRefundsRefund
  {:method "get",
   :path "/v1/charges/{charge}/refunds/{refund}",
   :path-params #{:charge :refund},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the details of an existing refund."},
  :DeleteCustomersCustomerCardsId
  {:method "delete",
   :path "/v1/customers/{customer}/cards/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{:expand},
   :description "Delete a specified source for a given customer."},
  :GetAccountPersonsPerson
  {:method "get",
   :path "/v1/account/persons/{person}",
   :path-params #{:person},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an existing person."},
  :GetAccountCapabilitiesCapability
  {:method "get",
   :path "/v1/account/capabilities/{capability}",
   :path-params #{:capability},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves information about the specified Account Capability."},
  :PostOrdersIdReturns
  {:method "post",
   :path "/v1/orders/{id}/returns",
   :path-params #{:id},
   :query-params #{},
   :body-params #{:items :expand},
   :description
   "Return all or part of an order. The order must have a status of paid or fulfilled before it can be returned. Once all items have been returned, the order will become canceled or returned depending on which status the order started in."},
  :GetInvoiceitems
  {:method "get",
   :path "/v1/invoiceitems",
   :path-params #{},
   :query-params
   #{:ending_before :limit :pending :created :customer :invoice :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first."},
  :GetTerminalLocations
  {:method "get",
   :path "/v1/terminal/locations",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "Returns a list of Location objects."},
  :GetTaxRates
  {:method "get",
   :path "/v1/tax_rates",
   :path-params #{},
   :query-params
   #{:ending_before :limit :inclusive :created :active :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first."},
  :GetOrderReturns
  {:method "get",
   :path "/v1/order_returns",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :order :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first."},
  :GetAccountsAccountExternalAccountsId
  {:method "get",
   :path "/v1/accounts/{account}/external_accounts/{id}",
   :path-params #{:account :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieve a specified external account for a given account."},
  :PostAccountExternalAccounts
  {:method "post",
   :path "/v1/account/external_accounts",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:external_account :bank_account :expand :metadata
     :default_for_currency},
   :description "Create an external account for a given account."},
  :PostTokens
  {:method "post",
   :path "/v1/tokens",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:person :customer :bank_account :account :card :pii :expand},
   :description
   "Creates a single-use token that represents a bank account’s details.\nThis token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a Custom account."},
  :GetSubscriptionsSubscriptionExposedId
  {:method "get",
   :path "/v1/subscriptions/{subscription_exposed_id}",
   :path-params #{:subscription_exposed_id},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the subscription with the given ID."},
  :PostApplicationFeesFeeRefundsId
  {:method "post",
   :path "/v1/application_fees/{fee}/refunds/{id}",
   :path-params #{:fee :id},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata as an argument."},
  :PostCustomersCustomerSubscriptionsSubscriptionExposedId
  {:method "post",
   :path
   "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
   :path-params #{:customer :subscription_exposed_id},
   :query-params #{},
   :body-params
   #{:default_source :default_tax_rates :trial_from_plan
     :application_fee_percent :coupon :prorate :payment_behavior
     :days_until_due :proration_behavior :billing_cycle_anchor
     :default_payment_method :trial_end :proration_date :off_session
     :pending_invoice_item_interval :billing_thresholds
     :cancel_at_period_end :items :expand :metadata :cancel_at
     :collection_method :tax_percent},
   :description
   "Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the upcoming invoice endpoint."},
  :GetRecipients
  {:method "get",
   :path "/v1/recipients",
   :path-params #{},
   :query-params
   #{:ending_before :limit :type :created :expand :starting_after
     :verified},
   :body-params #{},
   :description
   "Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.",
   :deprecated true},
  :GetRadarValueListsValueList
  {:method "get",
   :path "/v1/radar/value_lists/{value_list}",
   :path-params #{:value_list},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a ValueList object."},
  :GetCustomersCustomerSubscriptions
  {:method "get",
   :path "/v1/customers/{customer}/subscriptions",
   :path-params #{:customer},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions."},
  :PostInvoicesInvoiceMarkUncollectible
  {:method "post",
   :path "/v1/invoices/{invoice}/mark_uncollectible",
   :path-params #{:invoice},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes."},
  :PostProductsId
  {:method "post",
   :path "/v1/products/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:description :caption :images :name :deactivate_on
     :package_dimensions :shippable :active :url :attributes :expand
     :metadata :statement_descriptor :unit_label},
   :description
   "Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :GetSubscriptionSchedulesSchedule
  {:method "get",
   :path "/v1/subscription_schedules/{schedule}",
   :path-params #{:schedule},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation."},
  :GetAccountExternalAccountsId
  {:method "get",
   :path "/v1/account/external_accounts/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieve a specified external account for a given account."},
  :GetCustomersCustomerSubscriptionsSubscriptionExposedId
  {:method "get",
   :path
   "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}",
   :path-params #{:customer :subscription_exposed_id},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the subscription with the given ID."},
  :PostApplePayDomains
  {:method "post",
   :path "/v1/apple_pay/domains",
   :path-params #{},
   :query-params #{},
   :body-params #{:domain_name :expand},
   :description "Create an apple pay domain."},
  :GetSubscriptionItems
  {:method "get",
   :path "/v1/subscription_items",
   :path-params #{},
   :query-params
   #{:ending_before :limit :expand :starting_after :subscription},
   :body-params #{},
   :description
   "Returns a list of your subscription items for a given subscription."},
  :PostRadarValueListsValueList
  {:method "post",
   :path "/v1/radar/value_lists/{value_list}",
   :path-params #{:value_list},
   :query-params #{},
   :body-params #{:name :alias :expand :metadata},
   :description
   "Updates a ValueList object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that item_type is immutable."},
  :GetCreditNotesPreview
  {:method "get",
   :path "/v1/credit_notes/preview",
   :path-params #{},
   :query-params
   #{:refund_amount :amount :credit_amount :lines :invoice :reason
     :out_of_band_amount :refund :expand :metadata :memo},
   :body-params #{},
   :description "Get a preview of a credit note without creating it."},
  :GetRadarValueListItemsItem
  {:method "get",
   :path "/v1/radar/value_list_items/{item}",
   :path-params #{:item},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a ValueListItem object."},
  :PostAccountsAccount
  {:method "post",
   :path "/v1/accounts/{account}",
   :path-params #{:account},
   :query-params #{},
   :body-params
   #{:email :business_profile :business_type :settings
     :external_account :bank_account :requested_capabilities
     :tos_acceptance :default_currency :individual :expand :metadata
     :company :account_token},
   :description
   "Updates a connected Express or Custom account by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked Custom Only below.) Parameters marked Custom and Express are supported by both account types.\n\nTo update your own account, use the Dashboard. Refer to our Connect documentation to learn more about updating accounts."},
  :GetApplicationFeesId
  {:method "get",
   :path "/v1/application_fees/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee."},
  :GetTopupsTopup
  {:method "get",
   :path "/v1/topups/{topup}",
   :path-params #{:topup},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information."},
  :GetInvoicesUpcoming
  {:method "get",
   :path "/v1/invoices/upcoming",
   :path-params #{},
   :query-params
   #{:schedule :subscription_items :coupon
     :subscription_trial_from_plan :subscription_start_date :customer
     :subscription_tax_percent :subscription_cancel_now
     :subscription_proration_date :subscription_billing_cycle_anchor
     :subscription_trial_end :subscription_proration_behavior
     :subscription_cancel_at :invoice_items
     :subscription_cancel_at_period_end :subscription_prorate :expand
     :subscription :subscription_default_tax_rates},
   :body-params #{},
   :description
   "At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.\n\nNote that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.\n\nYou can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a proration_date parameter when doing the actual subscription update. The value passed in should be the same as the subscription_proration_date returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where period[start] is equal to the subscription_proration_date on the upcoming invoice resource."},
  :PostAccountBankAccountsId
  {:method "post",
   :path "/v1/account/bank_accounts/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :default_for_currency
     :address_city},
   :description
   "Updates the metadata, account holder name, and account holder type of a bank account belonging to a Custom account, and optionally sets it as the default for its currency. Other bank account details are not editable by design.\nYou can re-enable a disabled bank account by performing an update call without providing any arguments or changes."},
  :PostTaxRates
  {:method "post",
   :path "/v1/tax_rates",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :jurisdiction :inclusive :percentage :active
     :display_name :expand :metadata},
   :description "Creates a new tax rate."},
  :PostAccountsAccountLoginLinks
  {:method "post",
   :path "/v1/accounts/{account}/login_links",
   :path-params #{:account},
   :query-params #{},
   :body-params #{:redirect_url :expand},
   :description
   "Creates a single-use login link for an Express account to access their Stripe dashboard.\n\nYou may only create login links for Express accounts connected to your platform."},
  :DeleteTerminalLocationsLocation
  {:method "delete",
   :path "/v1/terminal/locations/{location}",
   :path-params #{:location},
   :query-params #{},
   :body-params #{},
   :description "Deletes a Location object."},
  :PostCustomersCustomerCardsId
  {:method "post",
   :path "/v1/customers/{customer}/cards/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params
   #{:address_state :exp_year :name :account_holder_type
     :address_country :address_line2 :account_holder_name :address_zip
     :address_line1 :exp_month :expand :metadata :owner :address_city},
   :description "Update a specified source for a given customer."},
  :GetSourcesSource
  {:method "get",
   :path "/v1/sources/{source}",
   :path-params #{:source},
   :query-params #{:expand :client_secret},
   :body-params #{},
   :description
   "Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information."},
  :Post3dSecure
  {:method "post",
   :path "/v1/3d_secure",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:amount :return_url :customer :card :currency :expand},
   :description "Initiate 3D Secure authentication."},
  :PostSubscriptionSchedules
  {:method "post",
   :path "/v1/subscription_schedules",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:default_settings :customer :from_subscription :phases :start_date
     :end_behavior :expand :metadata},
   :description
   "Creates a new subscription schedule object. Each customer can have up to 25 active or scheduled subscriptions."},
  :GetExchangeRatesCurrency
  {:method "get",
   :path "/v1/exchange_rates/{currency}",
   :path-params #{:currency},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the exchange rates from the given currency to every supported currency."},
  :GetIssuingAuthorizationsAuthorization
  {:method "get",
   :path "/v1/issuing/authorizations/{authorization}",
   :path-params #{:authorization},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Authorization object."},
  :PostAccountPeoplePerson
  {:method "post",
   :path "/v1/account/people/{person}",
   :path-params #{:person},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification
     :account :dob :last_name_kanji :first_name_kana :last_name
     :first_name_kanji :gender :maiden_name :expand :metadata
     :id_number :ssn_last_4},
   :description "Updates an existing person."},
  :PostChargesChargeRefundsRefund
  {:method "post",
   :path "/v1/charges/{charge}/refunds/{refund}",
   :path-params #{:charge :refund},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description "Update a specified refund."},
  :DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
  {:method "delete",
   :path
   "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount",
   :path-params #{:customer :subscription_exposed_id},
   :query-params #{},
   :body-params #{},
   :description
   "Removes the currently applied discount on a customer."},
  :GetOrdersId
  {:method "get",
   :path "/v1/orders/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information."},
  :PostSetupIntentsIntentCancel
  {:method "post",
   :path "/v1/setup_intents/{intent}/cancel",
   :path-params #{:intent},
   :query-params #{},
   :body-params #{:cancellation_reason :expand},
   :description
   "A SetupIntent object can be canceled when it is in one of these statuses: requires_payment_method, requires_capture, requires_confirmation, requires_action. \n\nOnce canceled, setup is abandoned and any operations on the SetupIntent will fail with an error."},
  :PostInvoiceitemsInvoiceitem
  {:method "post",
   :path "/v1/invoiceitems/{invoiceitem}",
   :path-params #{:invoiceitem},
   :query-params #{},
   :body-params
   #{:description :amount :unit_amount :unit_amount_decimal
     :discountable :tax_rates :period :quantity :expand :metadata},
   :description
   "Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed."},
  :GetIssuingSettlements
  {:method "get",
   :path "/v1/issuing/settlements",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of Issuing Settlement objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :GetTerminalReadersReader
  {:method "get",
   :path "/v1/terminal/readers/{reader}",
   :path-params #{:reader},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a Reader object."},
  :PostPayoutsPayoutCancel
  {:method "post",
   :path "/v1/payouts/{payout}/cancel",
   :path-params #{:payout},
   :query-params #{},
   :body-params #{:expand},
   :description
   "A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts."},
  :PutAccountLogout
  {:method "put",
   :path "/v1/account/logout",
   :path-params #{},
   :query-params #{},
   :body-params #{:account :expand},
   :description
   "Invalidates all sessions for a light account, for a platform to use during platform logout.\n\nYou may only log out Express accounts connected to your platform."},
  :GetMandatesMandate
  {:method "get",
   :path "/v1/mandates/{mandate}",
   :path-params #{:mandate},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a Mandate object."},
  :GetSourcesSourceSourceTransactionsSourceTransaction
  {:method "get",
   :path
   "/v1/sources/{source}/source_transactions/{source_transaction}",
   :path-params #{:source :source_transaction},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information."},
  :PostCreditNotesIdVoid
  {:method "post",
   :path "/v1/credit_notes/{id}/void",
   :path-params #{:id},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Marks a credit note as void. Learn more about voiding credit notes."},
  :GetChargesChargeDispute
  {:method "get",
   :path "/v1/charges/{charge}/dispute",
   :path-params #{:charge},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieve a dispute for a specified charge."},
  :GetPaymentMethods
  {:method "get",
   :path "/v1/payment_methods",
   :path-params #{},
   :query-params
   #{:ending_before :limit :type :customer :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of PaymentMethods for a given Customer"},
  :DeleteAccount
  {:method "delete",
   :path "/v1/account",
   :path-params #{},
   :query-params #{},
   :body-params #{:account},
   :description
   "With Connect, you can delete Custom or Express accounts you manage.\n\nAccounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.\n\nIf you want to delete your own account, use the account information tab in your account settings instead."},
  :GetAccountsAccountPeoplePerson
  {:method "get",
   :path "/v1/accounts/{account}/people/{person}",
   :path-params #{:person :account},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an existing person."},
  :GetCustomersCustomer
  {:method "get",
   :path "/v1/customers/{customer}",
   :path-params #{:customer},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation."},
  :GetIssuerFraudRecords
  {:method "get",
   :path "/v1/issuer_fraud_records",
   :path-params #{},
   :query-params
   #{:ending_before :limit :charge :expand :starting_after},
   :body-params #{},
   :description "Returns a list of issuer fraud records.",
   :deprecated true},
  :GetReportingReportRunsReportRun
  {:method "get",
   :path "/v1/reporting/report_runs/{report_run}",
   :path-params #{:report_run},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an existing Report Run. (Requires a live-mode API key.)"},
  :PostSubscriptionItemsSubscriptionItemUsageRecords
  {:method "post",
   :path "/v1/subscription_items/{subscription_item}/usage_records",
   :path-params #{:subscription_item},
   :query-params #{},
   :body-params #{:action :quantity :timestamp :expand},
   :description
   "Creates a usage record for a specified subscription item and date, and fills it with a quantity.\n\nUsage records provide quantity information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the metered billing plan, Stripe helps you send accurate invoices to your customers.\n\nThe default calculation for usage is to add up all the quantity values of the usage records within a billing period. You can change this default behavior with the billing plan’s aggregate_usage parameter. When there is more than one usage record with the same timestamp, Stripe adds the quantity values together. In most cases, this is the desired resolution, however, you can change this behavior with the action parameter.\n\nThe default pricing model for metered billing is per-unit pricing. For finer granularity, you can configure metered billing to have a tiered pricing model."},
  :GetEventsId
  {:method "get",
   :path "/v1/events/{id}",
   :path-params #{:id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook."},
  :GetInvoices
  {:method "get",
   :path "/v1/invoices",
   :path-params #{},
   :query-params
   #{:ending_before :due_date :limit :created :customer :status :expand
     :starting_after :subscription :collection_method},
   :body-params #{},
   :description
   "You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first."},
  :PostTopupsTopup
  {:method "post",
   :path "/v1/topups/{topup}",
   :path-params #{:topup},
   :query-params #{},
   :body-params #{:description :expand :metadata},
   :description
   "Updates the metadata of a top-up. Other top-up details are not editable by design."},
  :PostCustomersCustomerBalanceTransactions
  {:method "post",
   :path "/v1/customers/{customer}/balance_transactions",
   :path-params #{:customer},
   :query-params #{},
   :body-params #{:description :amount :currency :expand :metadata},
   :description
   "Creates an immutable transaction that updates the customer’s balance."},
  :GetInvoicesInvoiceLines
  {:method "get",
   :path "/v1/invoices/{invoice}/lines",
   :path-params #{:invoice},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "When retrieving an invoice, you’ll get a lines property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items."},
  :DeleteCustomersCustomerBankAccountsId
  {:method "delete",
   :path "/v1/customers/{customer}/bank_accounts/{id}",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{:expand},
   :description "Delete a specified source for a given customer."},
  :GetIssuingCardsCard
  {:method "get",
   :path "/v1/issuing/cards/{card}",
   :path-params #{:card},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves an Issuing Card object."},
  :GetAccountsAccountPersons
  {:method "get",
   :path "/v1/accounts/{account}/persons",
   :path-params #{:account},
   :query-params
   #{:ending_before :limit :relationship :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first."},
  :PostSubscriptionsSubscriptionExposedId
  {:method "post",
   :path "/v1/subscriptions/{subscription_exposed_id}",
   :path-params #{:subscription_exposed_id},
   :query-params #{},
   :body-params
   #{:default_source :default_tax_rates :trial_from_plan
     :application_fee_percent :coupon :prorate :payment_behavior
     :days_until_due :proration_behavior :billing_cycle_anchor
     :default_payment_method :trial_end :proration_date :off_session
     :pending_invoice_item_interval :billing_thresholds
     :cancel_at_period_end :items :expand :metadata :cancel_at
     :collection_method :tax_percent},
   :description
   "Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the upcoming invoice endpoint."},
  :PostAccountsAccountReject
  {:method "post",
   :path "/v1/accounts/{account}/reject",
   :path-params #{:account},
   :query-params #{},
   :body-params #{:reason :expand},
   :description
   "With Connect, you may flag accounts as suspicious.\n\nTest-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero."},
  :DeleteInvoicesInvoice
  {:method "delete",
   :path "/v1/invoices/{invoice}",
   :path-params #{:invoice},
   :query-params #{},
   :body-params #{},
   :description
   "Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be voided."},
  :GetTaxRatesTaxRate
  {:method "get",
   :path "/v1/tax_rates/{tax_rate}",
   :path-params #{:tax_rate},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a tax rate with the given ID"},
  :PostPaymentIntentsIntentCapture
  {:method "post",
   :path "/v1/payment_intents/{intent}/capture",
   :path-params #{:intent},
   :query-params #{},
   :body-params
   #{:application_fee_amount :amount_to_capture
     :statement_descriptor_suffix :transfer_data :expand
     :statement_descriptor},
   :description
   "Capture the funds of an existing uncaptured PaymentIntent when its status is requires_capture.\n\nUncaptured PaymentIntents will be canceled exactly seven days after they are created.\n\nLearn more about separate authorization and capture."},
  :GetIssuingCardsCardDetails
  {:method "get",
   :path "/v1/issuing/cards/{card}/details",
   :path-params #{:card},
   :query-params #{:expand},
   :body-params #{},
   :description
   "For virtual cards only. Retrieves an Issuing card_details object that contains the sensitive details of a virtual card."},
  :PostAccountsAccountPersonsPerson
  {:method "post",
   :path "/v1/accounts/{account}/persons/{person}",
   :path-params #{:person :account},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification :dob
     :last_name_kanji :first_name_kana :last_name :first_name_kanji
     :gender :maiden_name :expand :metadata :id_number :ssn_last_4},
   :description "Updates an existing person."},
  :PostPaymentIntents
  {:method "post",
   :path "/v1/payment_intents",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:confirm :description :amount :return_url :payment_method
     :save_payment_method :use_stripe_sdk :capture_method
     :application_fee_amount :setup_future_usage
     :statement_descriptor_suffix :receipt_email :mandate :on_behalf_of
     :payment_method_types :customer :transfer_group :currency
     :confirmation_method :off_session :mandate_data
     :error_on_requires_action :transfer_data :shipping :expand
     :metadata :statement_descriptor :payment_method_options},
   :description
   "Creates a PaymentIntent object.\n\nAfter the PaymentIntent is created, attach a payment method and confirm\nto continue the payment. You can read more about the different payment flows\navailable via the Payment Intents API here.\n\nWhen confirm=true is used during creation, it is equivalent to creating\nand confirming the PaymentIntent in the same call. You may use any parameters\navailable in the confirm API when confirm=true\nis supplied."},
  :PostCustomers
  {:method "post",
   :path "/v1/customers",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :address :email :invoice_prefix :payment_method
     :coupon :phone :name :tax_id_data :tax_exempt :source
     :invoice_settings :balance :preferred_locales :shipping
     :next_invoice_sequence :expand :metadata},
   :description "Creates a new customer object."},
  :DeleteAccountPeoplePerson
  {:method "delete",
   :path "/v1/account/people/{person}",
   :path-params #{:person},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the account_opener. If your integration is using the executive parameter, you cannot delete the only verified executive on file."},
  :DeleteSubscriptionItemsItem
  {:method "delete",
   :path "/v1/subscription_items/{item}",
   :path-params #{:item},
   :query-params #{},
   :body-params
   #{:prorate :proration_behavior :proration_date :clear_usage},
   :description
   "Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription."},
  :GetSetupIntentsIntent
  {:method "get",
   :path "/v1/setup_intents/{intent}",
   :path-params #{:intent},
   :query-params #{:expand :client_secret},
   :body-params #{},
   :description
   "Retrieves the details of a SetupIntent that has previously been created. \n\nClient-side retrieval using a publishable key is allowed when the client_secret is provided in the query string. \n\nWhen retrieved with a publishable key, only a subset of properties will be returned. Please refer to the SetupIntent object reference for more details."},
  :PostIssuingSettlementsSettlement
  {:method "post",
   :path "/v1/issuing/settlements/{settlement}",
   :path-params #{:settlement},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified Issuing Settlement object by setting the values of the parameters passed. Any parameters not provided will be left unchanged."},
  :DeleteAccountsAccount
  {:method "delete",
   :path "/v1/accounts/{account}",
   :path-params #{:account},
   :query-params #{},
   :body-params #{},
   :description
   "With Connect, you can delete Custom or Express accounts you manage.\n\nAccounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.\n\nIf you want to delete your own account, use the account information tab in your account settings instead."},
  :PostTaxRatesTaxRate
  {:method "post",
   :path "/v1/tax_rates/{tax_rate}",
   :path-params #{:tax_rate},
   :query-params #{},
   :body-params
   #{:description :jurisdiction :active :display_name :expand
     :metadata},
   :description "Updates an existing tax rate."},
  :PostWebhookEndpoints
  {:method "post",
   :path "/v1/webhook_endpoints",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:connect :enabled_events :url :api_version :expand :metadata},
   :description
   "A webhook endpoint must have a url and a list of enabled_events. You may optionally specify the Boolean connect parameter. If set to true, then a Connect webhook endpoint that notifies the specified url about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified url only about events from your account is created. You can also create webhook endpoints in the webhooks settings section of the Dashboard."},
  :GetCheckoutSessionsSession
  {:method "get",
   :path "/v1/checkout/sessions/{session}",
   :path-params #{:session},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a Session object."},
  :PostAccountPersonsPerson
  {:method "post",
   :path "/v1/account/persons/{person}",
   :path-params #{:person},
   :query-params #{},
   :body-params
   #{:person_token :address :email :first_name :address_kana :phone
     :address_kanji :last_name_kana :relationship :verification
     :account :dob :last_name_kanji :first_name_kana :last_name
     :first_name_kanji :gender :maiden_name :expand :metadata
     :id_number :ssn_last_4},
   :description "Updates an existing person."},
  :GetWebhookEndpoints
  {:method "get",
   :path "/v1/webhook_endpoints",
   :path-params #{},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "Returns a list of your webhook endpoints."},
  :DeleteRecipientsId
  {:method "delete",
   :path "/v1/recipients/{id}",
   :path-params #{:id},
   :query-params #{},
   :body-params #{},
   :description
   "Permanently deletes a recipient. It cannot be undone.",
   :deprecated true},
  :GetPlans
  {:method "get",
   :path "/v1/plans",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :product :active :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of your plans."},
  :DeleteInvoiceitemsInvoiceitem
  {:method "delete",
   :path "/v1/invoiceitems/{invoiceitem}",
   :path-params #{:invoiceitem},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice."},
  :DeleteCustomersCustomer
  {:method "delete",
   :path "/v1/customers/{customer}",
   :path-params #{:customer},
   :query-params #{},
   :body-params #{},
   :description
   "Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer."},
  :GetRadarValueListItems
  {:method "get",
   :path "/v1/radar/value_list_items",
   :path-params #{},
   :query-params
   #{:ending_before :limit :value :created :value_list :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of ValueListItem objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :PostAccounts
  {:method "post",
   :path "/v1/accounts",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:email :business_profile :business_type :settings :type
     :external_account :bank_account :requested_capabilities
     :tos_acceptance :default_currency :individual :expand :country
     :metadata :company :account_token},
   :description
   "With Connect, you can create Stripe accounts for your users.\nTo do this, you’ll first need to register your platform.\n\nFor Standard accounts, parameters other than country, email, and type\nare used to prefill the account application that we ask the account holder to complete."},
  :PostSourcesSource
  {:method "post",
   :path "/v1/sources/{source}",
   :path-params #{:source},
   :query-params #{},
   :body-params
   #{:amount :source_order :mandate :expand :metadata :owner},
   :description
   "Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request accepts the metadata and owner as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our payment method guides for more detail."},
  :PostOrdersIdPay
  {:method "post",
   :path "/v1/orders/{id}/pay",
   :path-params #{:id},
   :query-params #{},
   :body-params
   #{:email :application_fee :source :customer :expand :metadata},
   :description
   "Pay an order by providing a source to create a payment."},
  :GetInvoiceitemsInvoiceitem
  {:method "get",
   :path "/v1/invoiceitems/{invoiceitem}",
   :path-params #{:invoiceitem},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the invoice item with the given ID."},
  :PostChargesChargeDispute
  {:method "post",
   :path "/v1/charges/{charge}/dispute",
   :path-params #{:charge},
   :query-params #{},
   :body-params #{:evidence :submit :expand :metadata},
   :description ""},
  :GetCustomersCustomerBalanceTransactions
  {:method "get",
   :path "/v1/customers/{customer}/balance_transactions",
   :path-params #{:customer},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of transactions that updated the customer’s balance."},
  :PostTransfers
  {:method "post",
   :path "/v1/transfers",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:description :amount :source_transaction :source_type
     :transfer_group :currency :expand :metadata :destination},
   :description
   "To send funds from your Stripe account to a connected account, you create a new transfer object. Your Stripe balance must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error."},
  :PostWebhookEndpointsWebhookEndpoint
  {:method "post",
   :path "/v1/webhook_endpoints/{webhook_endpoint}",
   :path-params #{:webhook_endpoint},
   :query-params #{},
   :body-params #{:disabled :enabled_events :url :expand :metadata},
   :description
   "Updates the webhook endpoint. You may edit the url, the list of enabled_events, and the status of your endpoint."},
  :GetTokensToken
  {:method "get",
   :path "/v1/tokens/{token}",
   :path-params #{:token},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves the token with the given ID."},
  :PostSkus
  {:method "post",
   :path "/v1/skus",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:package_dimensions :inventory :currency :product :active :id
     :image :attributes :price :expand :metadata},
   :description "Creates a new SKU associated with a product."},
  :PostPlansPlan
  {:method "post",
   :path "/v1/plans/{plan}",
   :path-params #{:plan},
   :query-params #{},
   :body-params
   #{:nickname :product :active :trial_period_days :expand :metadata},
   :description
   "Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle."},
  :PostRadarValueListItems
  {:method "post",
   :path "/v1/radar/value_list_items",
   :path-params #{},
   :query-params #{},
   :body-params #{:value :value_list :expand},
   :description
   "Creates a new ValueListItem object, which is added to the specified parent value list."},
  :GetCheckoutSessions
  {:method "get",
   :path "/v1/checkout/sessions",
   :path-params #{},
   :query-params
   #{:ending_before :limit :payment_intent :expand :starting_after
     :subscription},
   :body-params #{},
   :description "Returns a list of Checkout Sessions."},
  :DeleteEphemeralKeysKey
  {:method "delete",
   :path "/v1/ephemeral_keys/{key}",
   :path-params #{:key},
   :query-params #{},
   :body-params #{:expand},
   :description
   "Invalidates a short-lived API key for a given resource."},
  :PostTerminalConnectionTokens
  {:method "post",
   :path "/v1/terminal/connection_tokens",
   :path-params #{},
   :query-params #{},
   :body-params #{:location :expand},
   :description
   "To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token."},
  :GetCustomersCustomerTaxIds
  {:method "get",
   :path "/v1/customers/{customer}/tax_ids",
   :path-params #{:customer},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description "Returns a list of tax IDs for a customer."},
  :GetFileLinks
  {:method "get",
   :path "/v1/file_links",
   :path-params #{},
   :query-params
   #{:ending_before :limit :file :created :expired :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of file links."},
  :PostAccountLoginLinks
  {:method "post",
   :path "/v1/account/login_links",
   :path-params #{},
   :query-params #{},
   :body-params #{:account :redirect_url :expand},
   :description
   "Creates a single-use login link for an Express account to access their Stripe dashboard.\n\nYou may only create login links for Express accounts connected to your platform."},
  :GetRadarValueLists
  {:method "get",
   :path "/v1/radar/value_lists",
   :path-params #{},
   :query-params
   #{:ending_before :contains :limit :created :alias :expand
     :starting_after},
   :body-params #{},
   :description
   "Returns a list of ValueList objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first."},
  :GetSubscriptions
  {:method "get",
   :path "/v1/subscriptions",
   :path-params #{},
   :query-params
   #{:ending_before :limit :created :current_period_end :customer
     :status :plan :expand :current_period_start :starting_after
     :collection_method},
   :body-params #{},
   :description
   "By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify status=canceled."},
  :GetCustomersCustomerTaxIdsId
  {:method "get",
   :path "/v1/customers/{customer}/tax_ids/{id}",
   :path-params #{:customer :id},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the TaxID object with the given identifier."},
  :PostAccountCapabilitiesCapability
  {:method "post",
   :path "/v1/account/capabilities/{capability}",
   :path-params #{:capability},
   :query-params #{},
   :body-params #{:requested :expand},
   :description "Updates an existing Account Capability."},
  :GetTopups
  {:method "get",
   :path "/v1/topups",
   :path-params #{},
   :query-params
   #{:amount :ending_before :limit :created :status :expand
     :starting_after},
   :body-params #{},
   :description "Returns a list of top-ups."},
  :PostSubscriptionItems
  {:method "post",
   :path "/v1/subscription_items",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:prorate :payment_behavior :proration_behavior :proration_date
     :billing_thresholds :tax_rates :quantity :plan :expand :metadata
     :subscription},
   :description
   "Adds a new item to an existing subscription. No existing items will be changed or replaced."},
  :GetReportingReportTypesReportType
  {:method "get",
   :path "/v1/reporting/report_types/{report_type}",
   :path-params #{:report_type},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of a Report Type. (Requires a live-mode API key.)"},
  :PostCreditNotes
  {:method "post",
   :path "/v1/credit_notes",
   :path-params #{},
   :query-params #{},
   :body-params
   #{:refund_amount :amount :credit_amount :lines :invoice :reason
     :out_of_band_amount :refund :expand :metadata :memo},
   :description
   "Issue a credit note to adjust the amount of a finalized invoice. For a status=open invoice, a credit note reduces\nits amount_due. For a status=paid invoice, a credit note does not affect its amount_due. Instead, it can result\nin any combination of the following:\n\n\n Refund: create a new refund (using refund_amount) or link an existing refund (using refund).\n Customer balance credit: credit the customer’s balance (using credit_amount) which will be automatically applied to their next invoice when it’s finalized.\n Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using out_of_band_amount).\n\n\nFor post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.\n\nYou may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s pre_payment_credit_notes_amount\nor post_payment_credit_notes_amount depending on its status at the time of credit note creation."},
  :DeleteRadarValueListItemsItem
  {:method "delete",
   :path "/v1/radar/value_list_items/{item}",
   :path-params #{:item},
   :query-params #{},
   :body-params #{},
   :description
   "Deletes a ValueListItem object, removing it from its parent value list."},
  :GetTransfersIdReversals
  {:method "get",
   :path "/v1/transfers/{id}/reversals",
   :path-params #{:id},
   :query-params #{:ending_before :limit :expand :starting_after},
   :body-params #{},
   :description
   "You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the limit and starting_after parameters to page through additional reversals."},
  :GetSourcesSourceMandateNotificationsMandateNotification
  {:method "get",
   :path
   "/v1/sources/{source}/mandate_notifications/{mandate_notification}",
   :path-params #{:mandate_notification :source},
   :query-params #{:expand},
   :body-params #{},
   :description "Retrieves a new Source MandateNotification."},
  :GetSkus
  {:method "get",
   :path "/v1/skus",
   :path-params #{},
   :query-params
   #{:ending_before :in_stock :limit :ids :product :active :attributes
     :expand :starting_after},
   :body-params #{},
   :description
   "Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first."},
  :PostIssuingAuthorizationsAuthorizationApprove
  {:method "post",
   :path "/v1/issuing/authorizations/{authorization}/approve",
   :path-params #{:authorization},
   :query-params #{},
   :body-params #{:held_amount :expand :metadata},
   :description "Approves a pending Issuing Authorization object."},
  :PostTransfersTransferReversalsId
  {:method "post",
   :path "/v1/transfers/{transfer}/reversals/{id}",
   :path-params #{:transfer :id},
   :query-params #{},
   :body-params #{:expand :metadata},
   :description
   "Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n\nThis request only accepts metadata and description as arguments."},
  :PostCustomersCustomerSourcesIdVerify
  {:method "post",
   :path "/v1/customers/{customer}/sources/{id}/verify",
   :path-params #{:customer :id},
   :query-params #{},
   :body-params #{:amounts :expand},
   :description
   "Verify a specified bank account for a given customer."},
  :GetCreditNotes
  {:method "get",
   :path "/v1/credit_notes",
   :path-params #{},
   :query-params
   #{:ending_before :limit :customer :invoice :expand :starting_after},
   :body-params #{},
   :description "Returns a list of credit notes."},
  :GetChargesCharge
  {:method "get",
   :path "/v1/charges/{charge}",
   :path-params #{:charge},
   :query-params #{:expand},
   :body-params #{},
   :description
   "Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge."},
  :PostRadarValueLists
  {:method "post",
   :path "/v1/radar/value_lists",
   :path-params #{},
   :query-params #{},
   :body-params #{:name :item_type :alias :expand :metadata},
   :description
   "Creates a new ValueList object, which can then be referenced in rules."}},
 :url "https://api.stripe.com/",
 :version "2020-03-02",
 :sha "c9f5f4fef2dbdb84f026041d9a2244b3d0059dde"}
